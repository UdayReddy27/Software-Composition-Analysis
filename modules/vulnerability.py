import json
import requests
from packaging.version import Version
from packaging.specifiers import SpecifierSet
import os

LOCAL_VULNERABILITY_DB = "vulnerability_mapping.json"

def check_zero_day_vulnerabilities(package, version):
    """
    Check for Zero-Day vulnerabilities for a given package and version using an external API (e.g., Vulners or CVE Database).
    This function simulates an API request to detect Zero-Day vulnerabilities.
    """
    url = f"https://vulners.com/api/v3/search/lucene/"
    query = f"package:{package} version:{version} zero-day:true"
    params = {
        'query': query,
        'limit': 5,  # Limit the number of results for now
    }
    
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        data = response.json()

        zero_day_vulnerabilities = []
        if data.get('data', {}).get('search', []):
            for vuln in data['data']['search']:
                if 'zero-day' in vuln['tags']:
                    zero_day_vulnerabilities.append({
                        'title': vuln.get('title'),
                        'severity': vuln.get('severity'),
                        'description': vuln.get('description'),
                    })
        return zero_day_vulnerabilities
    except requests.exceptions.RequestException as e:
        print(f"Error fetching Zero-Day vulnerabilities: {e}")
        return []


def check_vulnerabilities_local(package, version):
    """Check vulnerabilities for a package using a local mapping database and Zero-Day vulnerability API."""
    if not os.path.exists(LOCAL_VULNERABILITY_DB):
        print(f"Warning: Local vulnerability database '{LOCAL_VULNERABILITY_DB}' not found.")
        return []

    with open(LOCAL_VULNERABILITY_DB, "r") as f:
        vulnerability_data = json.load(f)

    vulnerabilities = []

    # Check local database for known vulnerabilities
    if package in vulnerability_data["vulnerabilities"]:
        for vuln in vulnerability_data["vulnerabilities"][package]:
            # Debugging: Print vulnerability details for the package
            print(f"Checking {package} {version} against vulnerability {vuln['vulnerability_id']}")
            try:
                specifier_set = SpecifierSet(",".join(vuln["versions"]))
                if Version(version) in specifier_set:
                    vulnerabilities.append(vuln)
            except Exception as e:
                print(f"Error processing versions for {package}: {e}")

    # Check for Zero-Day vulnerabilities
    zero_day_vulnerabilities = check_zero_day_vulnerabilities(package, version)
    vulnerabilities.extend(zero_day_vulnerabilities)

    return vulnerabilities
